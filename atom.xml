<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>駄日記</title>
    <link href="http://jp.dpwright.com/atom.xml" rel="self" />
    <link href="http://jp.dpwright.com" />
    <id>http://jp.dpwright.com/atom.xml</id>
    <author>
        <name>Daniel P. Wright</name>
        <email>dani@dpwright.com</email>
    </author>
    <updated>2019-08-18T00:00:00.000Z</updated>
    <entry>
        <title>このブログの作成</title>
        <link href="http://jp.dpwright.com/1" />
        <id>http://jp.dpwright.com/1</id>
        <published>2019-08-15T00:00:00.000Z</published>
        
        <updated>2019-08-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="postid">第一回</h1>
<h1 id="posttitle">このブログの作成</h1>
<p>ようこそ、新ブログ「駄日記」へ！</p>
<p>最近色んな方法で日本語を磨きたいと思って、今回　日本語ブログを作ってみました。せっかく日本語のブログを作るんだったら、<a href="https://ja.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E">日本語プログラミング言語</a>で作ればいいんじゃないの？</p>
<p>ということで、やってみました。
このページは<a href="https://ja.wikipedia.org/wiki/%E6%96%87%E8%8A%B8%E7%9A%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0">文芸的プログラム</a>で表現しています。最終的に、<em>このページ</em>を実行すれば、サイトが出来上がります。</p>
<p>さて、サイトの実装をみましょう。</p>
<h2>プログラミング言語「なでしこ」</h2>
<p>今回使用している言語は<a href="https://nadesi.com">なでしこ</a>という日本語プログラミング言語です。詳細は<a href="https://nadesi.com">なでしこのサイト</a>に説明されていますが、ひとつ、簡単な例を見てみましょう。</p>
<pre><code class="language-nako3">自分は「ダニー」。
相手は「皆様」。
相手に「、こんにちは！｛自分｝です。」を追加して表示。
</code></pre>
<p>出力は、<code>皆様、こんにちは！ダニーです。</code>となります。</p>
<p>シンプルで分かりやすいプログラミング言語ですね！</p>
<p>しかも連文（文法的「て形」表現）があり、助詞も使い、「日本語らしさ」のある　なかなか面白いプログラミング言語だと思います！</p>
<p>世界中のほとんどのプログラミング言語は英語の元で作られているので、「プログラミング＝英語」と当たり前のように思ってしまうことが多いのですが、こういう風に違う言語の元で作られるプログラミング言語があると、英語でまったく考えられない表現も出てきますね。あまりメジャーにならないかもしれませんが、こんな言語を作っている方がいるということが、とても嬉しいです。</p>
<p>では、なでしこ言語を使ってサイトを作ってみましょう。</p>
<h2>取込みと初期化</h2>
<p>まず、これから使う道具の下準備をしましょう。</p>
<p>なでしこはJavaScriptベースで出来ているので、node.jsのパッケージは全部使えます。このサイトは下記のパッケージを使用しています。</p>
<ul>
<li><a href="https://www.npmjs.com/package/mustache">mustache</a>、HTMLテンプレートシステム</li>
<li><a href="https://www.npmjs.com/package/markdown-it">markdown-it</a>、マークダウンからHTML変換</li>
<li><a href="https://www.npmjs.com/package/kansuji">kansuji</a>、アラビア数字から漢数字への変換</li>
<li><a href="https://www.npmjs.com/package/kanjidate">kanjidate</a>、西暦から和暦への変換</li>
</ul>
<p>このパッケージをなでしこからアクセスするため、<a href="https://github.com/dpwright/danikki/blob/source/%E3%83%A6%E3%83%BC%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3%E3%83%BC.js">ユーティリティー.js</a>を取り込む必要があります。</p>
<pre><code class="language-nako3">!「./ユーティリティー」を取り込む。
</code></pre>
<p>投稿の原書は<a href="https://ja.wikipedia.org/wiki/Markdown">マークダウン</a>で書いています。それをHTMLに変換して、最後はテンプレートを使って、投稿、固定ページ、タグ一覧などの形にします。ここではそのテンプレートを取り込みます。</p>
<p>テンプレートは全部「テンプレート」というフォルダに入っているので、そのフォルダから取得するユーティリティー関数を作りましょう。</p>
<pre><code class="language-nako3">関数　（名前の）ページテンプレートとは
　　「テンプレート/｛名前｝」をテンプレート取込。
ここまで。
</code></pre>
<p>なでしこの関数定義はこういう感じです。日本語は基本的に<a href="https://ja.wikipedia.org/wiki/SOV%E5%9E%8B">SOV型言語</a>ですので、関数名が最後になります。</p>
<p>関数、制御構文などは「ここまで」で終わります。ルビーで言えば「end」と同じようなものですね。個人的に、ただ「です」で終わりたいときもあると思います。特に関数定義と条件分岐で日本語として自然になるのでは？と思いますが、現在は「ここまで」しか使えません。</p>
<p>さぁ、定義した関数を使って、テンプレートを取り込みましょう。</p>
<pre><code class="language-nako3">投稿テンプレは「投稿」のページテンプレート。
固定ページテンプレは「固定ページ」のページテンプレート。
タグ一覧は「タグ一覧」のページテンプレート。
投稿一覧は「投稿一覧」のページテンプレート。
全体的投稿一覧は「全体的投稿一覧」のページテンプレート。
フィードテンプレは「フィード」のページテンプレート。
</code></pre>
<p>これで準備ができました。</p>
<h2>静的ファイルをコピー</h2>
<p>一番単純な処理は静的ファイルです。ファイルをそのままコピーするだけです。まず、「静的ファイル」というフォルダ内のファイル全部（再帰的に）を列挙します。ファイルごとに、「静的ファイル」以前の表記を消して、相対パスを取得します。例えば、</p>
<pre><code>/danikki/静的ファイル/hoge/filename.ext
</code></pre>
<p>というファイルパスがあるとすれば、</p>
<pre><code>hoge/filename.ext
</code></pre>
<p>という風にします。それから「出力」というフォルダ名を先に足します。</p>
<pre><code>出力/hoge/filename.ext
</code></pre>
<p>そこに、ファイルをコピーします。コードは下記のようになります。</p>
<pre><code class="language-nako3">「静的ファイル」を全ファイル列挙して絶対パスで反復
　　絶対パスを「静的ファイル/」で区切る。
　　相対パスはそれ＠１。
　　絶対パスを「出力/｛相対パス｝」へファイルコピー。
ここまで。
</code></pre>
<h2>情報抽出</h2>
<p>投稿ファイルは二つの部分に分かれています。前部が「投稿名」、「登校日」、「タグ」などのメタデータです。後は文章のマークダウンになります。この関数は、メタデータを抽出するためです。</p>
<p>まず、特別記号「# ---」を検索します。その記号の前は全てメタデータです。もし、「# ---」というマークがなければ、メタデータなしのマークダウンファイルだということです。</p>
<pre><code class="language-nako3">関数　（ファイルから）情報抽出とは
　　出力情報は空配列。
　　区切り行は「# ---｛改行｝」。
　　ファイルの区切り行で区切って、データに代入。
　　もしデータの要素数が１以下ならば、
　　　　ファイル内容はファイル。
　　違えば、
　　　　ファイル内容はデータ＠１。
</code></pre>
<p>二つの部分が見つかったら、ファイル内容はその二つ目（索引１）になります。一つ目（索引０）はメタデータです。メタデータの構成はこんな感じです。</p>
<pre><code>###### 投稿名　このブログの作成
###### 投稿日　2019-08-15
###### タグ　プログラミング、なでしこ言語
#####</code></pre>
]]></summary>
    </entry>
    <entry>
        <title>停電</title>
        <link href="http://jp.dpwright.com/2" />
        <id>http://jp.dpwright.com/2</id>
        <published>2019-08-16T00:00:00.000Z</published>
        
        <updated>2019-08-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="postid">第二回</h1>
<h1 id="posttitle">停電</h1>
<p>家は停電されました。</p>
<p>午後十二時半位に妻からの電話で分かった。ガスコンロの点火も点かないし、洗濯機は途中で止まった。服がベチャベチャ。エアコンがなくて暑い。今日の温度は三十五度。</p>
<p>まぁ、こんなことはありますね。日本に住んで七年間にはあまり停電された覚えがないけど、あるとしたら一回ぐらいかな。こちらでは割とよくあります。少なくても年一回、二回にそんな経験があったと思います。</p>
<p>とりあえず洗濯物を近くにあるコインランドリーに持っていって洗い直しました。今は十時前で、部屋は真っ暗です。予定では朝一時に直るはずとは聞いてます。</p>
<p>文句言ってるように聞こえるかも知れないが（正直一部は文句は言いたいけど…）こういう風に停電になるとやっぱり少し落ち着きますね。「陰翳礼讃」じゃないけど、この真っ暗の部屋でただ一つの電池キャンドルとこのiPhoneの光で夜を過ごして、何かと心地良い雰囲気には感じます。また明日まで電気が直ると祈ってるが、とりあえず今、この瞬間をもうちょっと楽しんでから、寝るしかない。</p>
<p>今日はよく眠れると思います。</p>
]]></summary>
    </entry>
</feed>
